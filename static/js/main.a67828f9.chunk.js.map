{"version":3,"sources":["components/Navigation.js","components/characters.js","App.js","index.js"],"names":["Navigation","props","className","score","highscore","CharacterCard","alt","name","src","image","onClick","imageClick","index","App","state","characters","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","clicked","console","log","setState","forEach","reset","this","map","key","id","React","Component","ReactDOM","render","document","getElementById"],"mappings":"m4BAgBeA,MAdf,SAAoBC,GAChB,OACI,6BACI,yBAAKC,UAAU,UACX,4BACI,wBAAIA,UAAU,SAAd,gBACA,oEACA,sCAAYD,EAAME,MAAlB,kBAAwCF,EAAMG,eCGnDC,MAVf,SAAuBJ,GACnB,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,QAAU,WAAOT,EAAMU,WAAWV,EAAMW,a,OCqEjFC,E,4MArEXC,MAAQ,CACJC,WAAYA,EACZZ,MAAO,EACPC,UAAW,G,EAGfY,QAAU,SAAAC,GAIN,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAGTD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGzB,OAAOD,G,EAGXN,WAAa,SAACC,GACLG,EAAWH,GAAOa,SAKnBC,QAAQC,IAAI,aACR,EAAKb,MAAMX,MAAQ,EAAKW,MAAMV,WAC9B,EAAKwB,SAAS,CAAExB,UAAW,EAAKU,MAAMX,QAE1C,EAAKyB,SAAS,CAAEzB,MAAO,IACvBY,EAAWc,SAAQ,SAAAC,GACfA,EAAML,SAAU,KAEpB,EAAKG,SAAS,CAAEb,WAAY,EAAKC,QAAQD,OAZzCA,EAAWH,GAAOa,SAAU,EAC5B,EAAKG,SAAS,CAAEzB,MAAO,EAAKW,MAAMX,MAAQ,IAC1C,EAAKyB,SAAS,CAAEb,WAAY,EAAKC,QAAQD,O,kEAe7CgB,KAAKH,SAAS,CAAEb,WAAYgB,KAAKf,QAAQD,O,+BAGnC,IAAD,OACL,OACI,oCACI,kBAAC,EAAD,CACIZ,MAAO4B,KAAKjB,MAAMX,MAClBC,UAAW2B,KAAKjB,MAAMV,YAEzB2B,KAAKjB,MAAMC,WAAWiB,KAAI,SAACjB,EAAYH,GAAb,OACvB,kBAAC,EAAD,CACID,WAAY,EAAKA,WACjBC,MAAOA,EACPqB,IAAKlB,EAAWmB,GAChBA,GAAInB,EAAWmB,GACf3B,KAAMQ,EAAWR,KACjBE,MAAOM,EAAWN,MAClBgB,QAASV,EAAWU,kB,GA/D1BU,IAAMC,WCDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.a67828f9.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navigation(props) {\n    return (\n        <div>\n            <nav className=\"navbar\">\n                <ul>\n                    <li className=\"brand\">Memory Game!</li>\n                    <li>Click on an image to start the game!</li>\n                    <li>Score: {props.score} | High Score: {props.highscore}</li>\n                </ul>\n            </nav>\n        </div>\n    )\n}\n\nexport default Navigation;","import React from \"react\";\n\nfunction CharacterCard(props) {\n    return (\n        <div className=\"card\">\n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image} onClick ={() => {props.imageClick(props.index)}}/>\n            </div>\n        </div>\n    )\n}\n\nexport default CharacterCard;","import React from \"react\";\nimport Nav from \"./components/Navigation\"\nimport CharacterCard from \"./components/characters\"\nimport characters from \"./characters.json\";\n\nclass App extends React.Component {\n    state = {\n        characters: characters,\n        score: 0,\n        highscore: 0\n    }\n\n    shuffle = array => {\n        var currentIndex = array.length, temporaryValue, randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n\n        return array\n    }\n\n    imageClick = (index) => {\n        if (!characters[index].clicked) {\n            characters[index].clicked = true\n            this.setState({ score: this.state.score + 1 });\n            this.setState({ characters: this.shuffle(characters) });\n        } else {\n            console.log(\"GAME OVER\");\n            if (this.state.score > this.state.highscore) {\n                this.setState({ highscore: this.state.score })\n            }\n            this.setState({ score: 0 });\n            characters.forEach(reset => {\n                reset.clicked = false\n            })\n            this.setState({ characters: this.shuffle(characters) });\n        }\n    }\n\n    componentDidMount() {\n        this.setState({ characters: this.shuffle(characters) });\n    }\n\n    render() {\n        return (\n            <>\n                <Nav\n                    score={this.state.score}\n                    highscore={this.state.highscore}\n                />\n                {this.state.characters.map((characters, index) =>\n                    <CharacterCard\n                        imageClick={this.imageClick}\n                        index={index}\n                        key={characters.id}\n                        id={characters.id}\n                        name={characters.name}\n                        image={characters.image}\n                        clicked={characters.clicked}\n                    />)}\n            </>\n        )\n    }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}